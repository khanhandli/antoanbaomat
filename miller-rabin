import random
 
# Nó trả về (x ^ y)% p
def power(x, y, p):
     
    # Initialize result
    res = 1;
     
    x = x % p;
    while (y > 0):
         
        if (y & 1):
            res = (res * x) % p;
 
        y = y>>1; # y = y/2
        x = (x * x) % p;
     
    return res;
 
# Hàm này được gọ
# cho tất cả k thử nghiệm. Nó trở lại
# false nếu n là hỗn hợp và
# trả về false nếu n là
# có lẽ là nguyên tố. d là một số lẻ
# số sao cho d * 2 <sup> r </sup> = n-1
# cho một số r> = 1
def miillerTest(d, n):
     
    # Chọn một số ngẫu nhiên trong [2..n-2]
    # Trường hợp góc đảm bảo rằng n> 4
    a = 2 + random.randint(1, n - 4);
 
    x = power(a, d, n);
 
    if (x == 1 or x == n - 1):
        return True;
 
    while (d != n - 1):
        x = (x * x) % n;
        d *= 2;
 
        if (x == 1):
            return False;
        if (x == n - 1):
            return True;
 
    
    return False;
 
# Nó trả về false nếu n là
# composite và trả về true nếu n
# có lẽ là số nguyên tố. k là một
# thông số đầu vào xác định
# mức độ chính xác. Giá trị cao hơn của
# k cho biết độ chính xác cao hơn.
def isPrime( n, k):
     
    # 
    if (n <= 1 or n == 4):
        return False;
    if (n <= 3):
        return True;
 
    # Tìm r sao cho n =
    # 2 ^ d * r + 1 đối với một số r> = 1
    d = n - 1;
    while (d % 2 == 0):
        d //= 2;
 
    # Lặp lại số lần 'k' đã cho
    for i in range(k):
        if (miillerTest(d, n) == False):
            return False;
 
    return True;
 
# Số lần lặp
k = 4;
 
print("Tất cả các số nguyên tố nhỏ hơn 100: ");
for n in range(1,100):
    if (isPrime(n, k)):
        print(n , end=" ");
